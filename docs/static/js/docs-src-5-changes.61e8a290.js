(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"./docs-src/5-changes.mdx":function(e,a,n){"use strict";n.r(a);var t=n("./node_modules/react/index.js"),s=n.n(t),o=n("./node_modules/@mdx-js/tag/dist/index.js");function c(e,a){if(null==e)return{};var n,t,s=function(e,a){if(null==e)return{};var n,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}a.default=function(e){var a=e.components;c(e,["components"]);return s.a.createElement(o.MDXTag,{name:"wrapper",components:a},s.a.createElement(o.MDXTag,{name:"h1",components:a,props:{id:"changes"}},s.a.createElement(o.MDXTag,{name:"a",components:a,parentName:"h1",props:{"aria-hidden":!0,href:"#changes"}},s.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Changes"),s.a.createElement(o.MDXTag,{name:"p",components:a},"To enable all observables, you must listen for changes. Else they will never emit anything.\nAlso needed for observables in collections. ",s.a.createElement(o.MDXTag,{name:"em",components:a,parentName:"p"},"(maybe we should enable this by default?)")),s.a.createElement(o.MDXTag,{name:"pre",components:a},s.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js"}},"let changes = db.changes();\n")),s.a.createElement(o.MDXTag,{name:"p",components:a},"RxPouch will cache the changes object on the database, so you can also access the changes\ninstance via ",s.a.createElement(o.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"db.changes"),"."),s.a.createElement(o.MDXTag,{name:"h1",components:a,props:{id:"cancel-changes"}},s.a.createElement(o.MDXTag,{name:"a",components:a,parentName:"h1",props:{"aria-hidden":!0,href:"#cancel-changes"}},s.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Cancel changes"),s.a.createElement(o.MDXTag,{name:"p",components:a},"This will stop listening for changes, so all observables will stop emmitting new values."),s.a.createElement(o.MDXTag,{name:"pre",components:a},s.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js"}},"changes.cancel();\n")),s.a.createElement(o.MDXTag,{name:"h1",components:a,props:{id:"observables"}},s.a.createElement(o.MDXTag,{name:"a",components:a,parentName:"h1",props:{"aria-hidden":!0,href:"#observables"}},s.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"Observables"),s.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"change"}},s.a.createElement(o.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#change"}},s.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"change$"),s.a.createElement(o.MDXTag,{name:"pre",components:a},s.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js"}},"change$ = this._subjects.change.asObservable();\n")),s.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"complete"}},s.a.createElement(o.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#complete"}},s.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"complete$"),s.a.createElement(o.MDXTag,{name:"pre",components:a},s.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js"}},"change$ = this._subjects.change.asObservable();\n")),s.a.createElement(o.MDXTag,{name:"h2",components:a,props:{id:"error"}},s.a.createElement(o.MDXTag,{name:"a",components:a,parentName:"h2",props:{"aria-hidden":!0,href:"#error"}},s.a.createElement(o.MDXTag,{name:"span",components:a,parentName:"a",props:{className:"icon-link"}},"#")),"error$"),s.a.createElement(o.MDXTag,{name:"pre",components:a},s.a.createElement(o.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"language-js"}},"change$ = this._subjects.change.asObservable();\n")))}}}]);